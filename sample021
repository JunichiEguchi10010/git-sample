WordPress WP_Queryオブジェクトの内容について 20250407

サンプルコード

$args = array( 
    'post_type' => 'post', // 投稿の種類（例: 投稿記事） 
    'posts_per_page' => 5, // 1ページに表示する投稿数 
    'category_name' => 'news', // カテゴリ名でフィルタリング 
    'orderby' => 'date', // 並び替え基準 
    'order' => 'DESC' // 降順（新しい順）
     ); 
    
    $query = new WP_Query($args);

object(WP_Query)#5 (50) {
  ["query_vars"]=> array(60) {
    ["page"]=> int(1)
    ["post_type"]=> string(4) "post"
    ["posts_per_page"]=> int(10)
    ["category_name"]=> string(0) ""
    ...
  }
  ["posts"]=> array(10) {
    [0]=> object(WP_Post) {
      ["ID"]=> int(123)
      ["post_title"]=> string(12) "記事タイトル"
      ...
    }
    ...
  }
  ["post_count"]=> int(10)
  ["found_posts"]=> int(57)
  ["max_num_pages"]=> int(6)
  ...
}


// クエリ設定を準備
クエリ条件 = {
    投稿タイプ: '投稿記事',
    1ページの表示件数: 5件,
    カテゴリ名: 'ニュース',
    並び替え基準: '日付',
    並び順: '降順'
};

// WP_Query を使用してクエリを実行
クエリ結果 = 新しいクエリ(クエリ条件);

// クエリ結果の構造
クエリオブジェクト {
    クエリ変数 = {
        ページ番号: 1,
        投稿タイプ: "投稿記事",
        1ページの表示件数: 10件,
        カテゴリ名: "",
        ...
    },
    投稿リスト = [
        投稿1 {
            ID: 123,
            投稿タイトル: "記事タイトル",
            ...
        },
        ...
    ],
    投稿件数: 10件,
    見つかった投稿数: 57件,
    最大ページ数: 6ページ,
    ...
}



bject(WP_Query)#5 (50) {
WP_Query は WordPress のクエリクラスで、投稿データを取得するために使います。
#5 はこのオブジェクトの識別番号（内部的な番号）。
(50) は、このオブジェクトが持っているプロパティの数。つまり、WP_Query クラスのインスタンスには50個のプロパティが含まれていることを示しています。

2. ["query_vars"]=> array(60) {
query_vars は、クエリの変数（条件）を格納した配列です。
「vars」は､「variables」（変数）の略
この配列には投稿を取得するために指定した条件（ページ番号、投稿タイプ、投稿数、カテゴリーなど）が含まれます。
配列の長さは60ということは、60個の条件を設定していることを意味します。

3. ["page"]=> int(1)
page は現在表示しているページ番号です。
int(1) となっているので、現在は1ページ目の投稿が表示されている状態です。

4. ["post_type"]=> string(4) "post"
post_type は取得する投稿のタイプを示します。
「(4)」は、"post"という文字列の長さを表しています。つまり､"post"という単語が4文字で構成されているため、このように表示されている
"post" は通常のブログ投稿を指します。
他には、"page"（固定ページ）やカスタム投稿タイプも指定できます。

5. ["posts_per_page"]=> int(10)
posts_per_page は1ページあたりに表示する投稿の数を示します。
単語「per（～ごとに､～あたり）」
int(10) なので、1ページに10件の投稿を表示する設定になっています。

6. ["category_name"]=> string(0) ""
category_name は、特定のカテゴリで絞り込むための条件です。
string(0) となっているので、カテゴリ指定はされていない、すべてのカテゴリから投稿を取得する状態です。

7. ["posts"]=> array(10) 
posts は実際に取得された投稿の配列です。
array(10) は10件の投稿が取得されていることを意味します。
各投稿は WP_Post オブジェクトとして格納されており、その詳細が続きます。

8. [0]=> object(WP_Post) 
これは取得された1件目の投稿を示しています。
各投稿は WP_Post クラスのインスタンスです。これには投稿ID、タイトル、内容などが含まれます。

9. ["ID"]=> int(123)
ID は投稿のID（ユニークな識別番号）です。
int(123) なので、この投稿のIDは123であることがわかります。

10. ["post_title"]=> string(12) "記事タイトル"
post_title は投稿のタイトルです。
string(12) なので、タイトルは「記事タイトル」で12文字の長さです。

11. 省略された部分（...）
省略されている部分には、投稿の他の詳細（例えば post_content:投稿の本文、post_date:投稿日など）が含まれています。
WP_Post オブジェクトには多くのプロパティがあり、すべてが表示されるわけではないので省略されています。

12. ["post_count"]=> int(10)
post_count は現在のページで表示されている投稿数を示します。
int(10) なので、10件の投稿が表示されていることがわかります。

13. ["found_posts"]=> int(57)
found_posts は、クエリによって見つかった投稿の総数を示します。
int(57) なので、検索条件に一致する投稿が全体で57件あるということです。

14. ["max_num_pages"]=> int(6)
max_num_pages は、クエリ結果に基づく最大ページ数を示します。
「num」は、「number（数）」の略です。
int(6) なので、全57件の投稿を1ページ10件ずつ表示すると、6ページ目まであることがわかります。

15. 省略された部分（...）
これも省略されている部分です。WP_Query オブジェクトには他にも多くの情報が含まれており、例えば投稿の順序や、タグ、カスタムフィールド、メタ情報などが含まれています。


まとめ
WP_Query オブジェクトは、WordPress が実行するクエリの結果を格納するためのクラスです。
query_vars には投稿を取得するための条件が格納されており、その情報を元にデータベースから投稿データが取得されます。
posts には実際に取得された投稿のオブジェクトが格納され、これを表示することでブログやページの一覧を表示できます。
post_count は表示されている投稿の数、found_posts は条件に一致した全体の投稿数、max_num_pages はページネーション用に必要な最大ページ数です。

WordPress の WP_Query オブジェクトは、クエリ結果として取得した投稿記事を WP_Post オブジェクトとして格納しています。
WP_Query を使用してカスタムクエリを実行すると、返される投稿データはすべて WP_Post オブジェクトとして扱われます。

php
$query = new WP_Query($args); // $args にクエリの条件を指定

if($query->have_posts()) {
    while($query->have_posts()) {
        $query->the_post();
        $post = get_post(); // WP_Post オブジェクト
        echo $post->post_title; // 投稿タイトルを取得
    }
    wp_reset_postdata();
}


$args は、WP_Query を使う際にクエリの条件を指定するための引数を格納します。
これにより、例えば取得したい投稿の種類や条件を柔軟に設定することができます。
php
$args = array(
    'post_type' => 'post', // 投稿の種類（例: 投稿記事）
    'posts_per_page' => 5, // 1ページに表示する投稿数
    'category_name' => 'news', // カテゴリ名でフィルタリング
    'orderby' => 'date', // 並び替え基準
    'order' => 'DESC' // 降順（新しい順）
);

$query = new WP_Query($args);

if ($query->have_posts()) {
    while ($query->have_posts()) {
        $query->the_post();
        echo get_the_title(); // 投稿タイトルを表示
    }
    wp_reset_postdata();
}
