li {
  list-style: none;
}

.splide {
  max-width: 800px;
  height: auto; /* 画面の50%の高さ */
  margin: 0 auto;
  margin-top: 10vh;/* スライダー上部に画面の10%の高さの余白 */
  position: relative; /* スライダー全体を基準にする */
}

.splide__slide {
  height: 300px; /* スライダー全体の高さ */
}

.splide__slide img {
  width: 100%;
  max-height: 300px; /* 画像の高さを制限 */
  /* height: 100%;だと親要素の高さに依存してしまうため */
  object-fit: cover; /* 画像の比率を維持 */
}

.splide__arrows {
  position: absolute;
  top: 50%;
  width: 100%;
  transform: translateY(-50%);
  display: flex;
  justify-content: space-between;
}

.splide__arrow {
  width: 40px;
  height: 40px;
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  border-radius: 50%;
}

.splide__arrow--prev {
  left: 10px; /* 左側に配置 */
}

.splide__arrow--next {
  right: 10px; /* 右側に配置 */
}
/* 参考 */
/* .splide__slide { */
/* flex: 0 0 auto; */
/* スライドのサイズを固定 */
/* } */
/* 
  flex: 0 0 auto; は、Flexbox の flex プロパティを使って、要素のサイズを固定する指定方法です。

各値の意味
flex-grow: 0（最初の 0）
子要素（スライド）が 親コンテナ内で余分なスペースを広げない。
つまり、スライドのサイズは指定されたままで、大きくならない。

flex-shrink: 0（次の 0）
画面が狭くなってもスライドが縮まない。
例えば、画面幅が変わってもスライドのサイズは変化しない。

flex-basis: auto（最後の auto）
要素の 元のサイズ（widthやheightで指定したサイズ） を基準にレイアウトされる。
この指定の役割
flex: 0 0 auto; を使用すると、スライド要素 (.splide__slide) は親コンテナ (.splide__list) 内でサイズを変更せず、 指定された幅と高さを維持 します。 これにより、Splideのスライダーで 各スライドが均等なサイズ で表示され、意図しない変形を防ぐことができます。

補足
もし、スライドの幅を一定にしつつ、余ったスペースを均等に分配したい場合は、flex: 1 1 auto; などを試してみると良いでしょう。 */
