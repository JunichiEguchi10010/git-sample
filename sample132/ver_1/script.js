window.addEventListener('DOMContentLoaded', () => {
    gsap.to('.fade-in', {
      opacity: 1,
      y: 0,
      duration: 1,
      stagger: 0.3,
      ease: 'power2.out',
    });
  });

//   初期フェードイン+スライドアニメーションの基本形です。CSSで初期状態（透明＋ズレ）を作って、JSで一斉に表示させる仕組み。

// 🔍 コード解説
// window.addEventListener('DOMContentLoaded', () => {
// 意味：HTMLの読み込みが完了したタイミングで、GSAPアニメーションを実行するように指示します。
// 補足：画像などの読み込み完了は待たず、「DOM（要素構造）」だけが整ったら処理が始まります。

// gsap.to('.fade-in', {
// 意味：.fade-in というクラスを持つ要素たちに対して、GSAPでアニメーションさせる準備をします。
// 補足：.fade-in に複数の要素がある場合、すべてに対して同じアニメーションが適用されます。

// opacity: 1,
// 意味：不透明度（opacity）を「1」に変化させて、完全に表示されるようにします。
// 補足：CSSなどで事前に opacity: 0 にしておくことで、最初は透明→フェードイン効果が出ます。

// y: 0,
// 意味：Y方向（縦）の位置を「0」にする。つまり、元の位置に戻すような動きになります。
// 補足：初期状態で transform: translateY(30px); を設定していると、そこから上にスライドする演出になります。

// duration: 1,
// 意味：アニメーションの時間を「1秒」に設定しています。
// 補足：動きの速度調整に使えます。秒数を伸ばせばゆっくりになります。

// stagger: 0.3,
// 意味：複数要素にアニメーションをかける際、0.3秒ずつずらして順番に実行します。
// 補足：同時ではなく、ふわっと一つずつ登場するような印象になります✨

// ease: 'power2.out',
// 意味：イージング（動きの緩急）を「power2.out」で設定。スムーズな減速効果を出します。
// 補足：他にも bounce, elastic, expo など種類豊富。自然な動きを作りたいときに重要です。

// });
// 意味：GSAPのアニメーション設定がここで完了します。

// });
// 意味：最初の DOMContentLoaded のイベント処理がここで終わり、コードのブロックが終了。