export interface Todo {
    id: number;
    title: string;
  }

// Todo インターフェースは、1つのタスク（ToDo項目）を表します。
// アプリケーション内でタスクを管理するための基本的な構造を定義します。

// export interface Todo {
//     id: number;   // タスクの一意な識別子（例: 1, 2, 3 ...）
//     title: string; // タスクの内容やタイトル（例: "買い物に行く"）
//   }

// このインターフェースは、ToDoリストアプリやタスク管理機能を持つアプリケーションでよく使われます。
// id はデータベースや状態管理での識別に使われ、title はユーザーが入力するタスクの説明です。
// 他のフィードとしてcompleted や dueDate などがあります。

// ❓  なぜ interface.ts が必要なのか
// 1. 型安全性の確保
// Todo インターフェースを使うことで、id や title の型（number や string）が明確になります。
// 開発中に型の不一致を防ぎ、バグの予防につながります。

// 2. コードの可読性と保守性の向上
// interface.ts にデータ構造をまとめておくことで、他のファイルからも一目で構造が分かります。
// チーム開発や将来的な拡張時に「この型は何を表しているか」がすぐに理解できます。

// 3. 再利用性の向上
// Todo 型は、表示・編集・保存など複数の機能で使われる可能性があります。
// 一箇所に定義しておけば、変更があったときも一括で更新できます。

// 4. IDEの補完機能が強化される
// VS Codeなどのエディタで、Todo 型を使うとプロパティの補完が効くようになります。
// 開発効率が上がり、ミスも減ります。


// ❓ ファイルを別に分ける必要があるのか？
// あります、interface.ts のようなファイルを別に分けることには明確なメリットがあります。
// 構造化されたアプリを設計する場合、ファイル分割は保守性・再利用性・明快さの観点から非常に重要です。

// 📁 ファイルを分ける理由とメリット
// 1. 責務の分離（Separation of Concerns）
// interface.ts は「型定義だけ」に責任を持つファイル。
// ロジック（例：API呼び出し）やUI（例：Reactコンポーネント）とは分離することで、各ファイルの目的が明確になります。

// 2. 再利用性の向上
// 複数のコンポーネントやサービスで Todo 型を使う場合、共通の型定義ファイルがあると一元管理できます。
// 変更があったときも、型定義を一箇所修正するだけで済みます。

// 3. 教育的な明快さ
// 初心者にとって「型定義はここ」「ロジックはここ」と分かれている方が理解しやすい。

// 4. 拡張性とスケーラビリティ
// 今後 Todo に completed, dueDate, tags などのプロパティを追加する場合でも、型定義ファイルを拡張するだけで済みます。
// 大規模アプリでも型定義をモジュール化して管理できます。


// ❓ interface.ts は自動生成されるか？
// 基本的には 手動で作成することが一般的 ですが、以下のような状況ではフレームワークやツールによって自動生成されることもあります：

// ✅ 自動生成されるケース
// 1. APIスキーマからの型生成（OpenAPI / Swagger）
// ツール例：openapi-typescript, swagger-codegen, autorest
// REST APIの仕様書（OpenAPI）から interface.ts を自動生成
// 例：Todo エンドポイントがあれば Todo 型が生成される

// 2. GraphQL スキーマからの型生成
// ツール例：graphql-codegen
// GraphQLのクエリやスキーマから TypeScript の型を自動生成
// interface.ts に相当する型が generated.ts などに出力される

// 3. Prisma などの ORM ツール
// Prisma の schema.prisma から Todo モデルを定義すると、型が自動生成される
// （ただし interface.ts ではなく .d.ts や @prisma/client に含まれる）

// 4. CMS や Headless CMS（例：Strapi, Contentful）
// コンテンツモデルから TypeScript 型を生成するプラグインがある
// これも interface.ts に近い構造が自動生成される

// ❌ 自動生成されないケース（手動で書く場面）
// 小規模なアプリや学習用プロジェクト
// UIコンポーネントと連携するだけの簡単な型定義