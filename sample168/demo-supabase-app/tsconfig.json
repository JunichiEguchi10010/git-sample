// TypeScriptコンパイラの設定ファイル
{
  // TypeScriptコンパイラの基本設定
  "compilerOptions": {
    // 出力されるJavaScriptのバージョン（ES2017は比較的モダンな構文を許容）
    "target": "ES2017",

    // 使用する標準ライブラリ（DOM操作や最新のES機能を含む）
    "lib": ["dom", "dom.iterable", "esnext"],

    // JavaScriptファイルも型チェック対象に含める（移行中のプロジェクトで便利）
    "allowJs": true,

    // 外部ライブラリの型定義チェックをスキップ（ビルド高速化、ただし型の不整合に注意）
    "skipLibCheck": true,

    // 厳格な型チェックを無効化（初心者向けだが、将来的には true を推奨）
    "strict": false,

    // TypeScriptの出力を生成しない（Next.jsがビルドを管理するため）
    "noEmit": true,

    // 増分コンパイルを有効化（変更点のみ再チェックすることで高速化）
    "incremental": true,

    // モジュール形式を ESNext に設定（import/export を使用）
    "module": "esnext",

    // CommonJS モジュールとの互換性を確保（Node.jsライブラリとの連携に必要）
    "esModuleInterop": true,

    // モジュールの解決方法（Node.jsスタイルでファイルを探す）
    "moduleResolution": "node",

    // JSONファイルを import 可能にする（設定ファイルなどを扱う際に便利）
    "resolveJsonModule": true,

    // ファイル単位での型チェックを有効化（Next.jsでは必須）
    "isolatedModules": true,

    // JSX構文をそのまま保持（Next.jsが後で処理するため）
    "jsx": "preserve",

    // Next.js専用のTypeScriptプラグインを使用（型補完やエラー検出を強化）
    "plugins": [
      {
        // プラグイン名（Next.jsの型サポートを強化）
        "name": "next"
      }
    ]
  },

  // 型チェック対象のファイル一覧
  "include": [
    // Next.jsが自動生成する環境定義ファイル（必須）
    "next-env.d.ts",

    // すべての TypeScript ファイル（.ts）
    "**/*.ts",

    // JSX構文を含む TypeScript ファイル（.tsx）
    "**/*.tsx",

    // Next.jsの型定義（App Router使用時などに必要）
    ".next/types/**/*.ts"
  ],

  // 型チェックから除外するフォルダ
  "exclude": [
    // 外部ライブラリ（型定義は別途管理されているため除外）
    "node_modules"
  ]
}

// 🔰補足
// "strict": false は一時的な緩和策。将来的には true にして型安全性を高めるのが理想です。
// "jsx": "preserve" は Next.js 固有の設定。React 単体プロジェクトでは "react" や "react-jsx" を使うこともあります。
// "moduleResolution": "node" は "bundler" に変更することで Turbopack 対応になります（Next.js App Router + 最新構成向け）。


// 元コード
// {
//   "compilerOptions！": {
//     "target": "ES2017",
//     "lib": [
//       "dom",
//       "dom.iterable",
//       "esnext"
//     ],
//     "allowJs": true,
//     "skipLibCheck": true,
//     "strict": true,
//     "noEmit": true,
//     "esModuleInterop": true,
//     "module": "esnext",
//     "moduleResolution": "bundler",
//     "resolveJsonModule": true,
//     "isolatedModules": true,
//     "jsx": "preserve",
//     "incremental": true,
//     "plugins": [
//       {
//         "name": "next"
//       }
//     ],
//     "paths": {
//       "@/*": [
//         "./*"
//       ]
//     }
//   },
//   "include": [
//     "next-env.d.ts",
//     "**/*.ts",
//     "**/*.tsx",
//     ".next/types/**/*.ts"
//   ],
//   "exclude": [
//     "node_modules"
//   ],
//   "compilerOptions": {
//     "target": "ES2017",
//     "lib": [
//       "dom",
//       "dom.iterable",
//       "esnext"
//     ],
//     "allowJs": true,
//     "skipLibCheck": true,
//     "strict": false,
//     "noEmit": true,
//     "incremental": true,
//     "module": "esnext",
//     "esModuleInterop": true,
//     "moduleResolution": "node",
//     "resolveJsonModule": true,
//     "isolatedModules": true,
//     "jsx": "preserve",
//     "plugins": [
//       {
//         "name": "next"
//       }
//     ]
//   }
// }


// 🧭 tsconfig.jsonとは何か？
// tsconfig.json は、TypeScriptコンパイラの設定ファイルです。プロジェクト全体に対して「どうやって型チェックするか」「どのファイルを対象にするか」「どんなJavaScriptに変換するか」などを指示します。

// 主な役割：
// 機能	              説明
// コンパイル設定	    どのJavaScriptバージョンに変換するか（例：ES2017）
// 型チェックの範囲	  どのファイルを対象にするか（include / exclude）
// JSXの扱い	       ReactやNext.jsで使うJSX構文をどう処理するか
// モジュール解決	    import されたファイルをどう探すか（Node風か、Turbopack風か）
// プラグイン	        Next.jsなどのフレームワーク向けに補助機能を追加

// ⚙️ 自動生成されるのか？
// ✅ はい、以下のような場合に自動生成されます：
// 方法	                  説明
// npx create-next-app	Next.js プロジェクトを作成すると、自動で tsconfig.json が生成されます（TypeScriptを選んだ場合）
// tsc --init	          TypeScript単体プロジェクトでは、このコマンドで初期設定ファイルが生成されます
// next dev 実行時	    tsconfig.json が存在しない場合、Next.js が自動で生成してくれることもあります（最低限の設定）

// 🧠 ポイント
// tsconfig.json がないと TypeScript は「どう動けばいいか」分からず、エラーになることがあります。
// 最初は自動生成された内容で十分ですが、Next.jsの構成やTailwindのバージョンに応じて微調整すると、より快適に開発できます。